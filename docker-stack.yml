version: '3'
networks:
  gobii-net:
services:
  web:
    image: gadm01/gobii_web_${IMAGE_SUFFIX}:${GOBII_TAG}
    #container_name: gobii-web-node
    ports:
      - "8081:8080"
    networks:
      - gobii-net
    volumes:  
      - app_data:/data
      - ndd_data:/ndd_data
      - ./gobii-web.properties:/var/gobii-web.properties
    depends_on:
      - "db"
    stdin_open: true
    tty: true
    # entrypoint: /tmp/web-entry.sh
    deploy:
      replicas: 1
      #sample usage of resource limits
      #resources:
      # limits:
      #  cpus: "0.1"
      #  memory: 50M
      restart_policy:
        condition: on-failure
    healthcheck:
      test: "wget --quiet --spider http://localhost:8080/ || exit 1"
      interval: 10s
      timeout: 20s
      retries: 3
  db:
    # build: 
    #   context: ./gobii-db
    #   args:
    #     - GOBII_TAG=${GOBII_TAG}
    image: gadm01/gobii_db_${IMAGE_SUFFIX}:${GOBII_TAG}
    #container_name: gobii-db-node
    ports:
      - "5433:5432"
    networks:
      - gobii-net
    environment:
      - gobiiuid=${GOBII_UID}
      - gobiigid=${GOBII_GID}
      - gobiiuserpassword=${DOCKER_GOBII_ADMIN_PASSWORD}
    volumes:  
      - app_data:/var
      - ndd_data:/ndd_data
      - gobiipostgresetcubuntu:/etc/postgresql
      - gobiipostgreslogubuntu:/var/log/postgresql
      - gobiipostgreslibubuntu:/var/lib/postgresql
    command: >
      bash -c "cp -R /var/gobii_bundle /data/gobii_bundle;
      top"
    #this one's turns interactive mode on (equal to -i)
    stdin_open: true
    #allocates a pseudo-tty (equal to -t)
    tty: true
    #checks if postgres is running and the schema was created
    healthcheck:
      test: runuser -l postgres -c "psql -d gobii_dev -c 'select value from gobiiprop;' || exit 1"
      interval: 1m30s
      timeout: 20s
      retries: 3
    #these don't work with docker-compose up and are simply ignored, but keeping the settings here for when we get to explore swarm
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  compute:
    image: gadm01/gobii_compute_${IMAGE_SUFFIX}:${GOBII_TAG}
    #container_name: gobii-compute-node
    ports:
      - "2222:22"
    networks:
      - gobii-net
    volumes:  
      - app_data:/data
      - ndd_data:/ndd_data
    depends_on:
      - "web"
    stdin_open: true
    tty: true
  # config:
  #   image: docker
  #   #container_name: gobii-config-node
  #   privileged: true
  #   # ports:
  #   #   - "2222:22"
  #   networks:
  #     - gobii-net
  #   volumes:  
  #     - app_data:/data
  #     - ndd_data:/ndd_data
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - "compute"
  #   stdin_open: true
  #   tty: true
  #   # entrypoint: ''
  #   command: sh -c "
  #     docker exec gobii-web-node bash -c 'chown -R gadm:gobii /data/gobii_bundle' &&
  #     docker exec gobii-web-node bash -c 'chown -R gadm:gobii /data/liquibase' &&
  #     docker exec gobii-web-node bash -c 'cp /data/gobii_bundle/config/confidentiality.txt /data/gobii_bundle/crops/dev/notices;' &&
  #     docker exec -u gadm gobii-web-node bash -c 'bash /data/gobii_bundle/config/gobiiconfig_wrapper.sh /var/gobii-web.properties' &&
  #     docker exec -u gadm gobii-web-node bash -c 'source /var/gobii-web.properties; cd /data/liquibase; java -jar bin/liquibase.jar --username=$$DB_USERNAME --password=$$DB_PASS --url=jdbc:postgresql://$$DOCKER_DB_HOST:$$DOCKER_DB_PORT/$$DB_NAME_CROP1 --driver=org.postgresql.Driver --classpath=drivers/postgresql-9.4.1209.jar --changeLogFile=changelogs/db.changelog-master.xml --contexts=$$LIQUIBASE_CROP1_CONTEXTS update;' &&
  #     docker exec -u gadm gobii-compute-node bash -c 'source /var/gobii-web.properties; cd /data/gobii_bundle/loaders/etc; crontab -r; bash addCron.sh /data/gobii_bundle $$DOCKER_CROP1_NAME $$DOCKER_CRON_INTERVAL $$DOCKER_CRON_FILE_AGE;'
  #     "
  loader:
    #container_name: gobii-loader-ui
    image: gadm01/gobii.loader.ui:${LOADER_TAG}
    ports:
      - "4200:4200"
    networks:
      - gobii-net
    depends_on:
      - "web"
      - "keycloak"
    environment:
      PORT: "4200"
      HOST: "localhost"
      BASEURL: "gobii-web-node:8080"
    healthcheck:
      test: "wget -q -s http://localhost:4200/ || exit 1"
      interval: 10s
      timeout: 20s
      retries: 3
  portal:
    #container_name: gobii-portal-ui
    image: gadm01/gobii.portal.ui:${PORTAL_TAG}
    ports:
      - "4201:4200"
    networks:
      - gobii-net
    depends_on:
      - "web"
      - "keycloak"
    environment:
      PORT: "4200"
      HOST: "localhost"
      BASEURL: "gobii-web-node:8080"
    healthcheck:
      test: "wget -q -s http://localhost:4200/ || exit 1"
      interval: 10s
      timeout: 20s
      retries: 3
  jobstatus:
    #container_name: gobii-jobstatus-ui
    image: gadm01/gobii.jobstatus.ui:${JOBSTATUS_TAG}
    ports:
      - "4202:4200"
    networks:
      - gobii-net
    depends_on:
      - "web"
      - "keycloak"
    environment:
      PORT: "4200"
      HOST: "localhost"
      BASEURL: "gobii-web-node:8080"
    healthcheck:
      test: "wget -q -s http://localhost:4200/ || exit 1"
      interval: 10s
      timeout: 20s
      retries: 3
  keycloak:
    #container_name: keycloak
    image: jboss/keycloak:${KEYCLOAK_TAG}
    ports:
      - "8080:8080"
    networks:
      - gobii-net
    volumes:
      # Expecting to have the gobii.keycloak repo checked out besides this one. 
      # Empty dir created and theme ignored if missing.
      - ./../gobii.keycloak/themes/gobii/:/opt/jboss/keycloak/themes/gobii/
    environment:
      KEYCLOAK_PASSWORD: "admin"
      KEYCLOAK_USER: "admin"
    command:
    - -b 0.0.0.0 --server-config=standalone.xml
    # Older builds of Keycloak dont include curl or wget...
    #healthcheck:
    #   test: "wget -q -s http://localhost:4200/ || exit 1"
    #   interval: 10s
    #   timeout: 20s
    #   retries: 3
volumes:
  app_data:
    external: false
  ndd_data:
    external: false
  gobiipostgresetcubuntu:
    external: false
  gobiipostgreslogubuntu:
    external: false
  gobiipostgreslibubuntu:
    external: false
