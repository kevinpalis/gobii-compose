version: '3'
networks:
  gobii-net:
services:
  # web:
  #   build: ./gobii-web
  #   container_name: gobii-web-node
  #   ports:
  #     - "8081:8080"
  #   networks:
  #     - gobii-net
  #   volumes:  
  #     - app_data:/data
  #     - ndd_data:/ndd_data
  #   depends_on:
  #     - "db"
  #   stdin_open: true
  #   tty: true
  db:
    # build: 
    #   context: ./gobii-db
    #   args:
    #     - GOBII_TAG=${GOBII_TAG}
    image: gadm01/gobii_db_${IMAGE_SUFFIX}:${GOBII_TAG}
    container_name: gobii-db-node
    ports:
      - "5433:5432"
    networks:
      - gobii-net
    environment:
      - gobiiuid=${GOBII_UID}
      - gobiigid=${GOBII_GID}
      - gobiiuserpassword=${DOCKER_GOBII_ADMIN_PASSWORD}
    volumes:  
      - app_data:/data
      - ndd_data:/ndd_data
      - gobiipostgresetcubuntu:/etc/postgresql
      - gobiipostgreslogubuntu:/var/log/postgresql
      - gobiipostgreslibubuntu:/var/lib/postgresql
    #this one's turns interactive mode on (equal to -i)
    stdin_open: true
    #allocates a pseudo-tty (equal to -t)
    tty: true
    #checks if postgres is running and the schema was created
    healthcheck:
      test: runuser -l postgres -c "psql -d gobii_dev -c 'select value from gobiiprop;' || exit 1"
      interval: 1m30s
      timeout: 20s
      retries: 3
    #these don't work with docker-compose up and are simply ignored, but keeping the settings here for when we get to explore swarm
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
volumes:
  app_data:
    external: false
  ndd_data:
    external: false
  gobiipostgresetcubuntu:
    external: false
  gobiipostgreslogubuntu:
    external: false
  gobiipostgreslibubuntu:
    external: false